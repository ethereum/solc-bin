#!/usr/bin/env node

'use strict'

const fs = require('fs')
const path = require('path')
const util = require('util')
const semver = require('semver')
const workerpool = require('workerpool')

// This script updates the index files list.js and list.txt in the directories containing binaries,
// as well as the 'latest' and 'nightly' symlinks/files.

const readFile = util.promisify(fs.readFile)
const readdir = util.promisify(fs.readdir)

function generateLegacyListJS (builds, releases) {
  return `
var soljsonSources = ${JSON.stringify(builds, null, 2)};
var soljsonReleases = ${JSON.stringify(releases, null, 2)};

if (typeof(module) !== 'undefined')
  module.exports = {
    'allVersions': soljsonSources,
    'releases': soljsonReleases
  };
`
}

function updateSymlinkSync (linkPathRelativeToRoot, targetRelativeToLink) {
  const absoluteLinkPath = path.join(__dirname, linkPathRelativeToRoot)
  let linkString

  try {
    linkString = fs.readlinkSync(absoluteLinkPath)

    if (targetRelativeToLink !== linkString) {
      fs.unlinkSync(absoluteLinkPath)
      console.log('Removed link ' + linkPathRelativeToRoot + ' -> ' + linkString)
    }
  } catch (err) {
    if (err.code !== 'ENOENT') {
      throw err
    }
  }

  if (targetRelativeToLink !== linkString) {
    fs.symlinkSync(targetRelativeToLink, absoluteLinkPath, 'file')
    console.log('Created link ' + linkPathRelativeToRoot + ' -> ' + targetRelativeToLink)
  }
}

function updateCopy (srcRelativeToRoot, destRelativeToRoot) {
  fs.readFile(path.join(__dirname, srcRelativeToRoot), function (err, data) {
    if (err) {
      throw err
    }

    const absoluteDest = path.join(__dirname, destRelativeToRoot)
    fs.stat(absoluteDest, function (err, stats) {
      if (err && err.code !== 'ENOENT') {
        throw err
      }

      // If the target is a symlink, we want to replace it with a copy rather than overwrite the file it links to
      if (!err && stats.isSymbolicLink()) {
        fs.unlinkSync(absoluteDest)
      }

      fs.writeFile(absoluteDest, data, function (err) {
        if (err) {
          throw err
        }
        console.log('Updated ' + destRelativeToRoot)
      })
    })
  })
}

function deleteIfExists (filePathRelativeToRoot) {
  const absoluteFilePath = path.join(__dirname, filePathRelativeToRoot)

  fs.lstat(absoluteFilePath, function (err, stats) {
    if (err && err.code !== 'ENOENT') {
      throw err
    }

    if (!err) {
      console.log('Deleted ' + filePathRelativeToRoot)
      fs.unlinkSync(absoluteFilePath)
    }
  })
}

async function batchedAsyncMap (values, batchSize, dir, oldList) {
  const batchPromises = []

  for (let i = 0; i < values.length; i += batchSize) {
    batchPromises.push(pool.exec('workerMain', [dir, values.slice(i, i + batchSize), oldList]))
  }

  return (await Promise.all(batchPromises)).flat()
}

async function processDir (dir, options, listCallback) {
  const files = await readdir(path.join(__dirname, dir), { withFileTypes: true })

  let oldList
  if (options.reuseHashes) {
    try {
      const oldListFileContent = await readFile(path.join(__dirname, dir, '/list.json'))
      oldList = JSON.parse(oldListFileContent.toString())
    } catch (err) {
      // Not being able to read the existing list is not a critical error.
      // We'll just recreate it from scratch.
    }
  }

  const binaryPrefix = (dir === '/bin' || dir === '/wasm' ? 'soljson' : 'solc-' + dir.slice(1))
  const binaryExtensions = {
    '/bin': ['.js'],
    '/wasm': ['.js'],
    '/emscripten-asmjs': ['.js'],
    '/emscripten-wasm32': ['.js'],
    '/windows-amd64': ['.zip', '.exe'],
    '/linux-amd64': [''],
    '/macosx-amd64': ['']
  }[dir] || ''

  // ascending list (oldest version first)
  const parsedFileNames = files
    .filter(function (file) {
      // Skip symbolic links with less then 8 characters in the commit hash.
      // They exist only for backwards-compatibilty and should not be on the list.
      return dir !== '/bin' ||
        !file.isSymbolicLink() ||
        file.name.match(/^.+\+commit\.[0-9a-f]{8,}\.js$/)
    })
    .map(function (file) { return file.name })
    .map(function (binaryName) {
      const escapedExtensions = binaryExtensions.map(function (binaryExtension) {
        return binaryExtension.replace('.', '\\.')
      })
      return binaryName.match(new RegExp('^' + binaryPrefix + '-v([0-9.]*)(-([^+]*))?(\\+(.*))?(' + escapedExtensions.join('|') + ')$'))
    })
    .filter(function (matchResult) { return matchResult !== null })

  const parsedList = (await batchedAsyncMap(parsedFileNames, options.maxFilesPerBatch, dir, oldList))
    .sort(function (a, b) {
      if (a.longVersion === b.longVersion) {
        return 0
      }

      // NOTE: a vs. b (the order is important), because we want oldest first on parsedList.
      // NOTE: If semver considers two versions equal we don't have enough info to say which came earlier
      // so we don't care about their relative order as long as it's deterministic.
      return semver.compare(a.longVersion, b.longVersion) || (a.longVersion > b.longVersion ? -1 : 1)
    })

  // When the list is ready, let the callback process it
  if (listCallback !== undefined) {
    listCallback(parsedList)
  }

  // descending list
  const releases = parsedList
    .slice()
    .reverse()
    .reduce(function (prev, next) {
      if (next.prerelease === null) {
        prev[next.version] = next.path
      }
      return prev
    }, {})

  // descending list
  const buildNames = parsedList
    .slice()
    .reverse()
    .map(function (listEntry) { return listEntry.path })

  const latestRelease = parsedList
    .slice()
    .reverse()
    .filter(function (listEntry) { return listEntry.prerelease === null })
    .map(function (listEntry) {
      return listEntry.version
    })[0]

  // latest build (nightly)
  const latestBuildFile = buildNames[0]

  // latest release
  const latestReleaseFile = releases[latestRelease]

  // Write list.txt
  // A descending list of file names.
  fs.writeFile(path.join(__dirname, dir, '/list.txt'), buildNames.join('\n'), function (err) {
    if (err) {
      throw err
    }
    console.log('Updated ' + dir + '/list.txt')
  })

  // Write bin/list.json
  // Ascending list of builds and descending map of releases.
  fs.writeFile(path.join(__dirname, dir, '/list.json'), JSON.stringify({ builds: parsedList, releases: releases, latestRelease: latestRelease }, null, 2), function (err) {
    if (err) {
      throw err
    }
    console.log('Updated ' + dir + '/list.json')
  })

  // Write bin/list.js
  // Descending list of build filenames and descending map of releases.
  fs.writeFile(path.join(__dirname, dir, '/list.js'), generateLegacyListJS(buildNames, releases), function (err) {
    if (err) {
      throw err
    }
    console.log('Updated ' + dir + '/list.js')
  })

  // Update 'latest' symlink (except for wasm/ where the link is hard-coded to point at the one in bin/).
  // bin/ is a special case because we need to keep a copy rather than a symlink. The reason is that
  // some tools (in particular solc-js) have hard-coded github download URLs to it and can't handle symlinks.
  if (dir !== '/wasm') {
    const releaseExtension = binaryExtensions.find(function (extension) { return latestReleaseFile.endsWith(extension) })

    binaryExtensions.forEach(function (extension) {
      if (extension !== releaseExtension) {
        deleteIfExists(path.join(dir, binaryPrefix + '-latest' + extension))
      }
    })

    if (dir === '/bin') {
      updateCopy(path.join(dir, latestReleaseFile), path.join(dir, binaryPrefix + '-latest' + releaseExtension))
    } else {
      updateSymlinkSync(path.join(dir, binaryPrefix + '-latest' + releaseExtension), latestReleaseFile)
    }
  }

  // Update 'nightly' symlink in bin/ (we don't have nightlies for other platforms)
  if (dir === '/bin') {
    const nightlyExtension = binaryExtensions.find(function (extension) { return latestBuildFile.endsWith(extension) })

    binaryExtensions.forEach(function (extension) {
      if (extension !== nightlyExtension) {
        deleteIfExists(path.join(dir, binaryPrefix + '-latest' + extension))
      }
    })

    updateSymlinkSync(path.join(dir, binaryPrefix + '-nightly' + nightlyExtension), latestBuildFile)
  }
}

function parseCommandLine () {
  let reuseHashes
  let maxFilesPerBatch
  let maxWorkerProcesses

  for (let i = 2; i < process.argv.length; ++i) {
    if (process.argv[i] === '--reuse-hashes') {
      reuseHashes = true
    } else if (process.argv[i] === '--max-files-per-batch') {
      if (i + 1 >= process.argv.length) {
        console.error('Expected an integer argument after --max-files-per-batch.')
        process.exit(1)
      }

      maxFilesPerBatch = parseInt(process.argv[i + 1], 10)
      if (isNaN(maxFilesPerBatch) || maxFilesPerBatch <= 0) {
        console.error("Expected the argument of --max-files-per-batch to be a positive integer, got '" + process.argv[i + 1] + "'.")
        process.exit(1)
      }
      ++i
    } else if (process.argv[i] === '--max-worker-processes') {
      if (i + 1 >= process.argv.length) {
        console.error('Expected an integer argument after --max-worker-processes.')
        process.exit(1)
      }

      maxWorkerProcesses = parseInt(process.argv[i + 1], 10)
      if (isNaN(maxWorkerProcesses) || maxWorkerProcesses <= 0) {
        console.error("Expected the argument of --max-worker-processes to be a positive integer, got '" + process.argv[i + 1] + "'.")
        process.exit(1)
      }
      ++i
    } else {
      console.error("Invalid option: '" + process.argv[i] + "'.")
      process.exit(1)
    }
  }

  // Defaults
  if (reuseHashes === undefined) {
    reuseHashes = false
  }
  if (maxFilesPerBatch === undefined) {
    maxFilesPerBatch = 10 // Sensible default to not drown out a single worker
  }
  if (maxWorkerProcesses === undefined) {
    maxWorkerProcesses = 1
  }

  return {
    reuseHashes: reuseHashes,
    maxFilesPerBatch: maxFilesPerBatch,
    maxWorkerProcesses: maxWorkerProcesses
  }
}

const DIRS = [
  '/bin',
  '/linux-amd64',
  '/macosx-amd64',
  '/windows-amd64'
]

const options = parseCommandLine()

const pool = workerpool.pool('./update-worker.js', {
  maxWorkers: options.maxWorkerProcesses,
  // Threads would be ideal, but do not work as expected due to an issue with the swarmhash module
  workerType: 'process'
})

async function main () {
  await Promise.all(DIRS.map(async function (dir) {
    if (dir !== '/bin') {
      await processDir(dir, options)
    } else {
      await processDir(dir, options, function (parsedList) {
        // Any new releases added to bin/ need to be linked in other directories before we can start processing them.
        parsedList.forEach(function (release) {
          if (release.prerelease === undefined) {
            // Starting with 0.6.2 we no longer build asm.js releases and the new builds added to bin/ are all wasm.
            if (semver.gt(release.version, '0.6.1')) {
              updateSymlinkSync(
                path.join('/wasm', release.path),
                path.join('..', 'bin', release.path)
              )
            } else {
              updateSymlinkSync(
                path.join('/emscripten-asmjs', 'solc-emscripten-asmjs-v' + release.longVersion + '.js'),
                path.join('..', 'bin', release.path)
              )
            }
          }
        })
      })

      await processDir('/emscripten-asmjs', options)
      await processDir('/wasm', options, function (parsedList) {
        // Any new releases added to wasm/ need to be linked in emscripten-wasm32/ first.
        parsedList.forEach(function (release) {
          if (release.prerelease === undefined) {
            updateSymlinkSync(
              path.join('/emscripten-wasm32', 'solc-emscripten-wasm32-v' + release.longVersion + '.js'),
              path.join('..', 'wasm', release.path)
            )
          }
        })
      })

      await processDir('/emscripten-wasm32', options)
    }
  }))

  pool.terminate()
}

main();